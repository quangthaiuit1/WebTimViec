<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Click-through learning with VS Code and Didact</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ICVIL6nh3Ik/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Didact" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="help framework" scheme="searchisko:content:tags" /><category term="tutorial" scheme="searchisko:content:tags" /><category term="UI/UX" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Brian Fitzpatrick</name></author><id>searchisko:content:id:jbossorg_blog-click_through_learning_with_vs_code_and_didact</id><updated>2020-01-31T08:00:36Z</updated><published>2020-01-31T08:00:36Z</published><content type="html">&lt;p&gt;The Didact project is designed to fill a void in Visual Studio Code, but what exactly is it? And more importantly, why should you care?&lt;/p&gt; &lt;p&gt;Didact started as a &amp;#8220;What if?&amp;#8221; VS Code doesn’t provide a great way to walk users through a step-wise tutorial. &amp;#8220;What if&amp;#8221; we could meet that need by combining the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A simple markup language (such as Markdown or AsciiDoc).&lt;/li&gt; &lt;li&gt;The ability to render the markup as HTML using the VS Code webview.&lt;/li&gt; &lt;li&gt;A way to invoke the commands we create for each VS Code extension.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And over the course of a day or so of coding, I had a working prototype.&lt;/p&gt; &lt;p&gt;&lt;span id="more-672137"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Why Didact?&lt;/h2&gt; &lt;p&gt;We needed a name, so after Googling for unique words I didn’t find in the VS Code Marketplace, I came across &amp;#8220;Didact.&amp;#8221; A Didact is an individual gifted, trained, or intending to instruct—a perfect term to describe what we’re after.&lt;/p&gt; &lt;p&gt;At a high level, the Didact framework is meant to instruct users in a useful way regarding how to complete tasks. The project does this through a combination of text, images, and active links that show VS Code functionality in action. The tricky part is that Didact should make it easy for non-developers to not only write the tutorials but also to interact with the commands they want to invoke. That’s where markup languages like Markdown and AsiiDoc come into the picture. The power comes from pairing that simplicity with VS Code&amp;#8217;s simple command framework.&lt;/p&gt; &lt;h2&gt;So what does Didact do?&lt;/h2&gt; &lt;p&gt;When developers write a VS Code extension, they create commands and call them via menus, buttons, and the command palette. The API provides a great way to invoke them in other places, too. That’s what we leverage Didact.&lt;/p&gt; &lt;p&gt;The goal of Didact is to employ the &amp;#8220;Tell Them, Tell Them Again, and then Tell Them What You Told Them&amp;#8221; approach using a combination of text (or text and images) and actions. Imagine that you are presented with Figure 1 in VS Code.&lt;/p&gt; &lt;div id="attachment_672167" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672167" class="wp-image-672167 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example-1024x576.png" alt="Didact window showing a simple demonstration of how to bring up the Command Palette" width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672167" class="wp-caption-text"&gt;Figure 1: Get help by using VS Code to open a Didact window.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This window offers a couple of things. At the top, it provides a brief description that explains what the Command Palette is used for and how to access it. Below, it includes a simple link that opens the palette with a click, showing what happens when you press the right series of keys (e.g., Ctrl+Shift+P).&lt;/p&gt; &lt;p&gt;If you click the link, it shows you how to invoke a command through the regular keys or menu items, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_672177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672177" class="wp-image-672177 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example2-1024x576.png" alt="Clicking on the &amp;#34;click here&amp;#34; link opens the Command Palette as though you pressed the key combination or accessed it via the menu." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example2-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example2-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/didact-view-command-palette-example2-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672177" class="wp-caption-text"&gt;Figure 2: Click the link to show how to reach a command in the palette.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The text itself is written in Markdown and pulls in simple images plus a few links. All the &amp;#8220;heavy lifting&amp;#8221; behind the scenes in the active Didact link is provided through a simple URI:&lt;/p&gt; &lt;pre&gt;didact://?commandId=workbench.action.showCommands&amp;#38;completion=Opened%20Command%20Palette.&lt;/pre&gt; &lt;p&gt;If we unpack that URI, we find the command ID for &lt;code&gt;showCommands&lt;/code&gt; in VS Code (which is triggered when you press Ctrl+Shift+P on your keyboard) and a completion message that shows what Didact did behind the scenes in a small information popup in the lower right corner, as shown in Figure 2.&lt;/p&gt; &lt;p&gt;So, in this case, we told you what we were going to tell you, told you, showed it in action, and then showed it again, reinforcing the effects of clicking the right keys.&lt;/p&gt; &lt;h2&gt;What’s next for Didact?&lt;/h2&gt; &lt;p&gt;We’re just getting started with Didact and have plans to expand in a variety of ways, including the project scaffolding functionality. Scaffolding lets you quickly create a folder/file structure with example files to get you started with the amazing technologies VS Code lets you access.&lt;/p&gt; &lt;p&gt;If you’re interested in checking out this evolving framework, or want to get involved, we encourage you to drop by our &lt;a href="https://github.com/redhat-developer/vscode-didact" target="_blank" rel="noopener noreferrer"&gt;GitHub project page&lt;/a&gt; and poke around. Or, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-didact" target="_blank" rel="noopener noreferrer"&gt;install the &lt;code&gt;vscode-didact&lt;/code&gt; extension&lt;/a&gt; and play with it locally.&lt;/p&gt; &lt;p&gt;It’s early, but we’re excited to see where Didact evolves over the next few months. Have ideas for how this framework can be used? We’d love to hear from you!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#38;linkname=Click-through%20learning%20with%20VS%20Code%20and%20Didact" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F31%2Fclick-through-learning-with-vs-code-and-didact%2F&amp;#038;title=Click-through%20learning%20with%20VS%20Code%20and%20Didact" data-a2a-url="https://developers.redhat.com/blog/2020/01/31/click-through-learning-with-vs-code-and-didact/" data-a2a-title="Click-through learning with VS Code and Didact"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/31/click-through-learning-with-vs-code-and-didact/"&gt;Click-through learning with VS Code and Didact&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ICVIL6nh3Ik" height="1" width="1" alt=""/&gt;</content><summary>The Didact project is designed to fill a void in Visual Studio Code, but what exactly is it? And more importantly, why should you care? Didact started as a “What if?” VS Code doesn’t provide a great way to walk users through a step-wise tutorial. “What if” we could meet that need by combining the following: A simple markup language (such as Markdown or AsciiDoc). The ability to render the markup a...</summary><dc:creator>Brian Fitzpatrick</dc:creator><dc:date>2020-01-31T08:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/31/click-through-learning-with-vs-code-and-didact/</feedburner:origLink></entry><entry><title>Apache Camel 3.1 - More camel-core optimizations coming (Part 2)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Phl5pSWZdzw/apache-camel-31-more-camel-core_30.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_1_more_camel_core_optimizations_coming_part_2</id><updated>2020-01-30T11:34:14Z</updated><published>2020-01-30T11:34:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I have previously &lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html"&gt;blogged about the optimizations we are doing in the next Camel 3.1 release (part 1)&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Today I wanted to post a status update on the progress we have made since, about 4 weeks later.&lt;br /&gt;&lt;br /&gt;We have focused on optimizing camel-core in three areas:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;unnecessary object allocations&lt;/li&gt;&lt;li&gt;unnecessary method calls&lt;/li&gt;&lt;li&gt;improve performance&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;In other words we are making Camel create less objects, calling fewer methods, and improving the performance during routing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To help identify these issues in camel-core we were using a simple Camel route:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from timer:foo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to log:foo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And other times we focused on longer routes:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from timer:foo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to log:foo1&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to log:foo2&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to log:foo3&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; ...&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to log:fooN&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Or the focus on the bean component:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;from timer:foo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; to bean:foo&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;And so on. We also added an option to the timer component to not include metadata so the message dont contain any body, headers or exchange properties. This allowed us to focus on the pure routing engine and its overhead.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So all together this has helped identify many smaller points for improvements that collectively gains a great win.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;tl:dr - Show me the numbers&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Okay let's post some numbers first and then follow up with details what has been done.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;b&gt;Object Allocations - (5 minute sampling)&lt;/b&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;2.9 M objects created&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;55 M objects created&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; 1.8 M objects created&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Okay we have to admit that Camel 3.0 has an issue with excessive object allocations during routing. There are no memory leaks but it creates a lot of unnecessary objects. And I will get into details below why.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;However what is interesting is the gain between Camel 2.25 and 3.1 (40% less objects created).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;b&gt;Method Calls - (5 minute sampling)&lt;/b&gt;&lt;/u&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;139 different Camel methods in use&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; 167 different Camel methods in use&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;84 different Camel methods in use&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The table above lists the number of methods from Camel that Camel calls during routing. The data does not include all the methods from the JDK. As we cannot optimize those, but we can optimize the Camel source code.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As you can see from the table we have improvement. Camel 3.1 uses less than half of 3.0, and 40% less than Camel 2.2.5.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;Camel 3.0&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Okay so Camel 3.0 has a problem with using too much memory. A big reason is the new reactive executor which now executes each step in the routing via event looping, by handing over tasks to a queue and having workers that execute the tasks. So this handoff now requires creating additional objects and storing tasks in queue etc.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some of the biggest wins was to avoid creating TRACE logging message which unfortunately was always created regardless if TRACE logging level was enabled. Another big win was to avoid creating toString representation of the route processes with child elements. Instead Camel now only output the id of the process which is a fast operation and dont allocate new objects.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another problem was new code that are using java.util.stream. This is both a blessing and a curse (mostly a curse for fast code). So by using plain for loops, if structures, and avoiding java.util.stream in the critical parts of core routing engine we reduces object allocations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Camel 3 is also highly modularised, and for example in Camel 2.x we had all classes in the same classpath and could use instanceof checks. So in Camel 3 we had some code that performed poorly doing these kind of checks (java util streams again).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another problem was the reactive executor which was using a LinkedList as its queue. So if you have tasks going into the queue and workers processing them in the same pace, so the queue is empty/drained, then LinkedList performs poorly as it allocates/deallocates the object constantly. By switching to a ArrayQueue which has a pre-allocated size of 16 then there is always room in the queue for tasks and no allocation/deallocation happens.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are many more optimisations but those mentioned above where likely the biggest problems. Then a lot of smaller optimisations gained a lot combined.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Many smaller&amp;nbsp;optimisations&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The UUID generator of Camel is using a bit of string concat which costs. We have reduced the need for generating UUIDs in the message and unit of work so we only generate 1 per exchange.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The internal advices in the Camel routing engine (advice = before/after AOP). Some of these advices has state which they need to carry over from before to after, which means an object needs to be stored. Before we allocated an array for all advices even for those whom do not have state and thus storing a null. Now we only allocate the array with the exact number of advices that has state. (very small win, eg object[6] vs object[2] etc, but this happens per step in the Camel route, so it all adds up.). Another win was to avoid doing an AOP around UnitOfWork if it was not necessary from the internal routing processor. This avoids additional method calls and to allocate a callback object for the after task. As all of this happens for each step in the routing then its a good improvement.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Some of the most used EIPs has been optimized. For example &lt;to&gt; allows you to send the message to an endpoint using a different MEP (but this is rarely used). Now the EIP detects this and avoids creating a callback object for restoring the MEP. The pipeline EIP (eg when you do to -&amp;gt; to -&amp;gt; to) also has a little improvement to use an index counter instead of java.util.Iterator, as the latter allocates an extra object&lt;/to&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Camel also has a StopWatch that used a java.util.Date to store the time. This was optimized to use a long value.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Another improvement is the event notification. We now pre-calculate if its in use and avoid calling it all together for events related to routing messages. BTW in Camel 3.0 the event notifier was refactored to use Java 8 Supplier's and many fancy APIs but all of that created a lot of overhead. In Camel 3.1 we have restored the notifier to be like before in Camel 2.x and with additional optimisations.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So let me end this blog by saying that .... awesome. Camel 3.1 will use less memory, execute faster by not calling as many methods (mind that we may have had to move some code which was required to be called but doing this in a different way to avoid calling too many methods).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One of the bigger changes in terms of touched source code was to switch from using an instance based logger in ServiceSupport (base class for many things in Camel), to use a static logger instance. This means that there will be less Logger objects created and it's also better practice.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Better performance&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Other improvements is that we have moved some of the internal state that Camel kept as exchange properties to fields on the Exchange directly. This avoids storing a key/value in the properties map, but we can use primitives like boolean, int etc. This also performs better as its faster to get a boolean via a getter than to lookup the value in a Map via a key.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In fact in Camel 3.1 then during regular routing then Camel doesnt lookup any such state from exchange properties which means there is no method calls. There are still some state that are stored as exchange properties (some of those may be improved in the future, however most of these states are only used infrequently). What we have optimized is the state that are always checked and used during routing.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;u&gt;&lt;b&gt;Exchange getProperty(5 minute sampling)&lt;/b&gt;&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;572598&amp;nbsp; &amp;nbsp;getPropety(String)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;161502&amp;nbsp; &amp;nbsp;getPropety(String, Object)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;161502&amp;nbsp; &amp;nbsp;getPropety(String, Object, Class)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 2.25&amp;nbsp; &amp;nbsp; &amp;nbsp;141962&amp;nbsp; &amp;nbsp;getPropeties()&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; 574944&amp;nbsp; &amp;nbsp;getProperty(String)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; 167904&amp;nbsp; &amp;nbsp;getPropety(String, Object)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; 167904&amp;nbsp; &amp;nbsp;getPropety(String, Object, Class)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.0&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;91584&amp;nbsp; &amp;nbsp;getPropeties()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0&amp;nbsp; &amp;nbsp;getProperty(String)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0&amp;nbsp; &amp;nbsp;getPropety(String, Object)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0&amp;nbsp; &amp;nbsp;getPropety(String, Object, Class)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;Camel 3.1&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;0&amp;nbsp; &amp;nbsp;getPropeties()&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As you can see Camel 2.25 and 3.0 lookup this state a lot. And in Camel 3.1 we have optimized this tremendously and there are no lookup at all - as said the state is stored on the Exchange as primitive types which the JDK can inline and execute really fast.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The screenshot below shows Camel 2.25 vs 3.1. (The screenshot for 3.1 is slightly outdated as it was from yesterday and we have optimised Camel since). See screenshot below:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-0WVTF5BHjBU/XjK-kB9iHCI/AAAAAAAACEQ/Ks4WHFp8KWghMqn2lOHue44pYDOFuy-DgCLcBGAsYHQ/s1600/count-225vs310.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="357" data-original-width="1044" height="217" src="https://1.bp.blogspot.com/-0WVTF5BHjBU/XjK-kB9iHCI/AAAAAAAACEQ/Ks4WHFp8KWghMqn2lOHue44pYDOFuy-DgCLcBGAsYHQ/s640/count-225vs310.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Okay there are many other smaller optimizations and I am working on one currently as I write this blog. Okay let me end this blog, and save details for part 3.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=f88C4KV1Q2k:BBf-Loy3dog:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=f88C4KV1Q2k:BBf-Loy3dog:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=f88C4KV1Q2k:BBf-Loy3dog:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=f88C4KV1Q2k:BBf-Loy3dog:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=f88C4KV1Q2k:BBf-Loy3dog:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=f88C4KV1Q2k:BBf-Loy3dog:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=f88C4KV1Q2k:BBf-Loy3dog:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/f88C4KV1Q2k" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Phl5pSWZdzw" height="1" width="1" alt=""/&gt;</content><summary>I have previously blogged about the optimizations we are doing in the next Camel 3.1 release (part 1). Today I wanted to post a status update on the progress we have made since, about 4 weeks later. We have focused on optimizing camel-core in three areas: unnecessary object allocations unnecessary method calls improve performance In other words we are making Camel create less objects, calling fewe...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-01-30T11:34:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/f88C4KV1Q2k/apache-camel-31-more-camel-core_30.html</feedburner:origLink></entry><entry><title>Vault IDs in Red Hat Ansible and Red Hat Ansible Tower</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FVKU_9xYZ-8/" /><category term="ansible" scheme="searchisko:content:tags" /><category term="Ansible Tower" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="playbook encryption" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="vault ID" scheme="searchisko:content:tags" /><author><name>Sreejith Anujan</name></author><id>searchisko:content:id:jbossorg_blog-vault_ids_in_red_hat_ansible_and_red_hat_ansible_tower</id><updated>2020-01-30T08:00:10Z</updated><published>2020-01-30T08:00:10Z</published><content type="html">&lt;p&gt;This article demonstrates the use of multiple vault passwords through vault IDs. You will learn how to use vault IDs to encrypt a file and a string. Once they&amp;#8217;re encrypted, the vault ID can be referenced inside a playbook and used within &lt;a href="https://www.ansible.com/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Ansible&lt;/a&gt; and &lt;a href="https://www.ansible.com/products/tower" target="_blank" rel="noopener noreferrer"&gt;Red Hat Ansible Tower&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Starting with Ansible 2.4 and above, vault IDs are supported&lt;/h2&gt; &lt;p&gt;Vault IDs help you encrypt different files with different passwords to be referenced inside a playbook. Before Ansible 2.4, only one vault password could be used in each Ansible playbook. In effect, every file needed to be encrypted using the same vault password.&lt;/p&gt; &lt;p&gt;To begin with, vault IDs need to be pre-created and referenced inside your &lt;code&gt;ansible.cfg&lt;/code&gt; file. The following excerpt is from &lt;code&gt;ansible-config list&lt;/code&gt; for the configuration &lt;code&gt;DEFAULT_VAULT_IDENTITY_LIST&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;span id="more-667017"&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;default: [] description: A list of vault-ids to use by default. Equivalent to multiple --vault-id args. Vault-ids are tried in order. env: - {name: ANSIBLE_VAULT_IDENTITY_LIST} ini: - {key: vault_identity_list, section: defaults} name: Default vault ids type: list yaml: {key: defaults.vault_identity_list}&lt;/pre&gt; &lt;p&gt;You can reference multiple vault IDs and their corresponding vault files in &lt;code&gt;ansible.cfg&lt;/code&gt;.  The &lt;code&gt;vault_identity_list&lt;/code&gt; key under the &lt;code&gt;default&lt;/code&gt; section is used to map the vault IDs to files.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ansible.cfg&lt;/code&gt; has the following configuration:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ cat ansible.cfg [defaults] inventory = inventory remote_user = root vault_identity_list = inline@~/ansible/.inline_pass , files@~/ansible/.files_pass&lt;/pre&gt; &lt;p&gt;For the purpose of this article, I&amp;#8217;ve used the last line above to pre-create two vault password files in the &lt;code&gt;$HOME/ansible&lt;/code&gt; directory with the appropriate permissions. That last line maps vault-id &lt;code&gt;inline&lt;/code&gt; to &lt;code&gt;/home/sanujan/ansible/.inline_pass&lt;/code&gt; and vault-id &lt;code&gt;files&lt;/code&gt; to &lt;code&gt;/home/sanujan/ansible/.files_pass&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The contents of those password files are shown below:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ cat ~/ansible/.files_pass REDHAT [sanujan@fedora ansible]$ cat ~/ansible/.inline_pass redhat [sanujan@fedora ansible]$ ls -l ~/ansible/.files_pass ~/ansible/.inline_pass -r--------. 1 sanujan sanujan 7 Sep 23 06:25 /home/sanujan/ansible/.files_pass -r--------. 1 sanujan sanujan 7 Sep 23 06:25 /home/sanujan/ansible/.inline_pass&lt;/pre&gt; &lt;p&gt;This code creates a sample playbook containing encrypted text and a reference to an encrypted &lt;code&gt;vars&lt;/code&gt; file, (&lt;code&gt;vars/vars.yml&lt;/code&gt;), as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_667067" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667067" class="wp-image-667067" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Sample_Playbook_with_vault-300x103.png" alt="The results of running cat vault_encryption.yml." width="640" height="219" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Sample_Playbook_with_vault-300x103.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Sample_Playbook_with_vault-768x262.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Sample_Playbook_with_vault.png 998w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667067" class="wp-caption-text"&gt;Figure 1: Your playbook with its new encrypted vault contents.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;How the string and vars file are encrypted is detailed in the next section.&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Encrypting a file to be included/referenced inside the playbook&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;To create the encrypted section for a file, run:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ ansible-vault encrypt --encrypt-vault-id files vars/vars.yml&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--encrypt-vault-id files&lt;/code&gt; is how we reference the vault ID &amp;#8220;files&amp;#8221; to be used for encrypting the file &lt;code&gt;vars/vars.yml&lt;/code&gt; in the playbook directory. This command doesn&amp;#8217;t prompt us for a password because it references the ID &amp;#8220;files&amp;#8221; from &lt;code&gt;ansible.cfg&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The config file maps to &lt;code&gt;~/ansible/.files_pass&lt;/code&gt;, where the passphrase &lt;code&gt;REDHAT&lt;/code&gt; is hard-coded. In the &lt;code&gt;vars/vars.yml&lt;/code&gt; file, a variable is initialized with the key &lt;code&gt;course&lt;/code&gt; and value &lt;code&gt;DO457&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To view the encrypted file, you can use &lt;code&gt;ansible-vault&lt;/code&gt;&amp;#8216;s view option. Here, the passphrase is automatically taken by Ansible, as it&amp;#8217;s referenced inside &lt;code&gt;ansible.cfg&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ ansible-vault view vars/vars.yml  course: DO457&lt;/pre&gt; &lt;h2&gt;&lt;strong&gt;Encrypting a string to be used inside a playbook&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;To encrypt a string intended for use inside an Ansible playbook, use a format similar to:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ ansible-vault encrypt_string --encrypt-vault-id inline -n testing this-is-the-secret&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--encrypt-vault-id inline&lt;/code&gt; portion is how we reference the vault ID &lt;code&gt;inline&lt;/code&gt; to be used for encrypting the string &lt;code&gt;this-is-the-secret&lt;/code&gt;. Next, we set the &lt;code&gt;testing&lt;/code&gt; variable to the value of &lt;code&gt;this-is-the-secret&lt;/code&gt;using &lt;code&gt;-n testing&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This command doesn&amp;#8217;t prompt us for a password. Instead, it references the ID &lt;code&gt;inline&lt;/code&gt; from &lt;code&gt;ansible.cfg,&lt;/code&gt; which maps to &lt;code&gt;~/ansible/.inline_pass&lt;/code&gt; with the passphrase &lt;code&gt;redhat&lt;/code&gt;. The results for this command are shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_667057" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667057" class="wp-image-667057" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/encrypt_string_output.png" alt="The results of running ansible-vault encrypt_string --encrypt-vault-id inline -n testing this-is-the-secret" width="640" height="105" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/encrypt_string_output.png 997w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/encrypt_string_output-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/encrypt_string_output-768x126.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667057" class="wp-caption-text"&gt;Figure 2: Encrypting a string to put in your Ansible playbook.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The output breaks down as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The variable name &lt;code&gt;testing&lt;/code&gt;, followed by &lt;code&gt;!vault |&lt;/code&gt;, indicates that the vault is encrypted.&lt;/li&gt; &lt;li&gt;The vault version that supports the vault ID is &lt;code&gt;1.2&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The AES cipher in 256 bits is represented by &lt;code&gt;AES256&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;The vault ID in use is &lt;code&gt;inline&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The vault ID is visible in the header.&lt;/p&gt; &lt;p&gt;Now, you can copy and paste the contents including the variable name (&lt;code&gt;testing,&lt;/code&gt; in our case), all the way down to the line before &lt;code&gt;Encryption Successful&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Executing the playbook&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;In order to execute this playbook, run:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ ansible-playbook vault_encryption.yml&lt;/pre&gt; &lt;p&gt;The results are shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_667047" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667047" class="wp-image-667047" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ansible_playbook_execution_output.png" alt="The results of running ansible-playbook vault_encryption.yml." width="640" height="172" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ansible_playbook_execution_output.png 999w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ansible_playbook_execution_output-300x80.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ansible_playbook_execution_output-768x206.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667047" class="wp-caption-text"&gt;Figure 3: Executing your new playbook.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;&lt;strong&gt;Prompting the vault password during playbook execution&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;If the &lt;code&gt;vault_identity_list&lt;/code&gt; key is referenced in &lt;code&gt;ansible.cfg&lt;/code&gt;, Ansible will always read those password files from left to right, checking for possible passphrase matches and disregarding the vault IDs before the tilde (&lt;code&gt;~&lt;/code&gt;) character. If you prefer to have Ansible prompt you for the password to decrypt the vault string/file, you can comment out the &lt;code&gt;vault_identity_list&lt;/code&gt; key in &lt;code&gt;ansible.cfg&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To execute the playbook while requiring a prompt, use &lt;code&gt;--vault-id id@prompt&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[sanujan@fedora ansible]$ ansible-playbook --vault-id inline@prompt --vault-id files@prompt vault_encryption.yml&lt;/pre&gt; &lt;p&gt;An example is shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_667087" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667087" class="wp-image-667087" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_Prompt_Password.png" alt="The result of running ansible-playbook --vault-id inline@prompt --vault-id files@prompt vault_encryption.yml." width="640" height="202" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_Prompt_Password.png 999w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_Prompt_Password-300x95.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_Prompt_Password-768x242.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667087" class="wp-caption-text"&gt;Figure 4: Being prompted while executing your new playbook.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see, this command prompts you twice: once for entering the passphrase for vault ID &lt;code&gt;inline&lt;/code&gt; and the second for &lt;code&gt;files&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;&lt;strong&gt;Vault IDs in Ansible Tower&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;Ansible Tower also supports vault IDs, starting with Tower 3.3. You can reference these vault IDs while creating a credential of type &lt;code&gt;Vault&lt;/code&gt;, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_667077" style="width: 660px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667077" class="wp-image-667077" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_in_Tower.png" alt="The Ansible Tower New Credential screen." width="650" height="210" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_in_Tower.png 999w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_in_Tower-300x97.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Vault_in_Tower-768x248.png 768w" sizes="(max-width: 650px) 100vw, 650px" /&gt;&lt;p id="caption-attachment-667077" class="wp-caption-text"&gt;Figure 5: Using Vault IDs in Ansible Tower.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;&lt;b&gt;Summary&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Vault IDs offer the flexibility to choose multiple passphrases for encrypting different files and strings.  Ansible Tower supports vault IDs also while creating the &lt;code&gt;Vault&lt;/code&gt; credential.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;To learn more about vault IDs and how to use them in Red Hat Ansible and Red Hat Ansible Tower, see the following resources:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/latest/user_guide/vault.html#vault-ids-and-multiple-vault-passwords" target="_blank" rel="noopener noreferrer"&gt;Ansible Vault ID&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.ansible.com/ansible/latest/index.html" target="_blank" rel="noopener noreferrer"&gt;Ansible Documentation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://docs.ansible.com/ansible-tower/" target="_blank" rel="noopener noreferrer"&gt;Ansible Tower Documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#38;linkname=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F30%2Fvault-ids-in-red-hat-ansible-and-red-hat-ansible-tower%2F&amp;#038;title=Vault%20IDs%20in%20Red%20Hat%20Ansible%20and%20Red%20Hat%20Ansible%20Tower" data-a2a-url="https://developers.redhat.com/blog/2020/01/30/vault-ids-in-red-hat-ansible-and-red-hat-ansible-tower/" data-a2a-title="Vault IDs in Red Hat Ansible and Red Hat Ansible Tower"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/30/vault-ids-in-red-hat-ansible-and-red-hat-ansible-tower/"&gt;Vault IDs in Red Hat Ansible and Red Hat Ansible Tower&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FVKU_9xYZ-8" height="1" width="1" alt=""/&gt;</content><summary>This article demonstrates the use of multiple vault passwords through vault IDs. You will learn how to use vault IDs to encrypt a file and a string. Once they’re encrypted, the vault ID can be referenced inside a playbook and used within Red Hat Ansible and Red Hat Ansible Tower. Starting with Ansible 2.4 and above, vault IDs are supported Vault IDs help you encrypt different files with different ...</summary><dc:creator>Sreejith Anujan</dc:creator><dc:date>2020-01-30T08:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/30/vault-ids-in-red-hat-ansible-and-red-hat-ansible-tower/</feedburner:origLink></entry><entry><title>API login and JWT token generation using Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DnOP0NklMI0/" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="jwt token" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="Red Hat SSO" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><category term="sso" scheme="searchisko:content:tags" /><author><name>Muhammad Edwin</name></author><id>searchisko:content:id:jbossorg_blog-api_login_and_jwt_token_generation_using_keycloak</id><updated>2020-01-29T08:00:24Z</updated><published>2020-01-29T08:00:24Z</published><content type="html">&lt;p&gt;&lt;a href="https://www.redhat.com/en/products/middleware" target="_blank" rel="noopener noreferrer"&gt;Red Hat single sign-on&lt;/a&gt; (SSO)—or its open source version, Keycloak—is one of the leading products for web SSO capabilities, and is based on popular standards such as Security Assertion Markup Language (SAML) 2.0, OpenID Connect, and OAuth 2.0. One of Red Hat SSO&amp;#8217;s strongest features is that we can access Keycloak directly in many ways, whether through a simple HTML login form, or an API call. In the following scenario, we will generate a JWT token and then validate it. Everything will be done using API calls, so Keycloak&amp;#8217;s UI is not exposed to the public directly.&lt;/p&gt; &lt;h2&gt;&lt;span id="more-670397"&gt;&lt;/span&gt;Set up a user&lt;/h2&gt; &lt;p&gt;First, we will create a simple user in Keycloak, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_672877" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672877" class="wp-image-672877 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak01-1-1024x294.png" alt="Keycloak's user creation section." width="640" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak01-1-1024x294.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak01-1-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak01-1-768x220.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak01-1.png 1057w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672877" class="wp-caption-text"&gt;Figure 1: Create a user in Keycloak.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Fill in all mandatory fields, such as &lt;strong&gt;Username&lt;/strong&gt;, &lt;strong&gt;First Name&lt;/strong&gt;, and &lt;strong&gt;Last Name&lt;/strong&gt;, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_672887" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672887" class="wp-image-672887" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak02-1.png" alt="The Keycloak Add user dialog box." width="640" height="527" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak02-1.png 716w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak02-1-300x247.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672887" class="wp-caption-text"&gt;Figure 2: Enter the user&amp;#8217;s information.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Set the user&amp;#8217;s password, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_672897" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672897" class="wp-image-672897" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak03-1.png" alt="The Keycloak Manage Password dialog box." width="639" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak03-1.png 866w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak03-1-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak03-1-768x410.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;p id="caption-attachment-672897" class="wp-caption-text"&gt;Figure 3: Set the user&amp;#8217;s password.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Set up a client&lt;/h2&gt; &lt;p&gt;The next step is to create a specific &lt;em&gt;client&lt;/em&gt; in our realm, as shown in Figure 4. A client in Keycloak represents a resource that particular users can access, whether for authenticating a user, requesting identity information, or validating an access token.&lt;/p&gt; &lt;div id="attachment_672907" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672907" class="wp-image-672907 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak04-1-1024x382.png" alt="The Keycloak Clients screen." width="640" height="239" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak04-1-1024x382.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak04-1-300x112.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak04-1-768x287.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak04-1.png 1273w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672907" class="wp-caption-text"&gt;Figure 4: View your existing clients.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to open the &lt;strong&gt;Add Client&lt;/strong&gt; dialog box, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_672917" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672917" class="wp-image-672917" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak05-1.png" alt="The Keycloak Add Client dialog box." width="640" height="344" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak05-1.png 703w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak05-1-300x161.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672917" class="wp-caption-text"&gt;Figure 5: Create a new client.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Fill in all of the mandatory fields in the client form. Pay attention, especially, to &lt;strong&gt;Direct Grant Flow&lt;/strong&gt; (shown in Figure 6) and set its value to &lt;strong&gt;direct grant&lt;/strong&gt;. Also, change &lt;strong&gt;Access Type&lt;/strong&gt; to &lt;strong&gt;confidential&lt;/strong&gt;.&lt;/p&gt; &lt;div id="attachment_672927" style="width: 606px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672927" class="wp-image-672927 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak06-1.png" alt="The Keycloak client Advanced Settings and Authentication Flow Overrides dialog box." width="596" height="466" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak06-1.png 596w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak06-1-300x235.png 300w" sizes="(max-width: 596px) 100vw, 596px" /&gt;&lt;p id="caption-attachment-672927" class="wp-caption-text"&gt;Figure 6: Overriding the client&amp;#8217;s authentication flow.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Finally, change the client&amp;#8217;s credentials in the &lt;strong&gt;Client Authenticator&lt;/strong&gt; field to &lt;strong&gt;Client Id and Secret&lt;/strong&gt;, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_672937" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672937" class="wp-image-672937" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak07-1.png" alt="The Keycloak client's Credentials tab." width="640" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak07-1.png 995w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak07-1-300x101.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak07-1-768x258.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672937" class="wp-caption-text"&gt;Figure 7: Set your new client&amp;#8217;s credentials.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Test your new client&lt;/h2&gt; &lt;p&gt;Now we can test our newly created client through the REST API to simulate a simple login. Our authentication URL is:&lt;/p&gt; &lt;pre&gt;http://localhost:8080/auth/realms/&amp;#38;lt;your-realm-name&amp;#38;gt;/protocol/openid-connect/token&lt;/pre&gt; &lt;p&gt;Fill out the parameters and set our &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt; with our username and password:&lt;/p&gt; &lt;pre&gt;curl -L -X POST 'http://localhost:8080/auth/realms/whatever-realm/protocol/openid-connect/token' \ -H 'Content-Type: application/x-www-form-urlencoded' \ --data-urlencode 'client_id=clientid-03' \ --data-urlencode 'grant_type=password' \ --data-urlencode 'client_secret=ec78c6bb-8339-4bed-9b1b-e973d27107dc' \ --data-urlencode 'scope=openid' \ --data-urlencode 'username=emuhamma' \ --data-urlencode 'password=1'&lt;/pre&gt; &lt;p&gt;Or, we can use REST API tools like Postman to simulate an HTTP POST request, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_672947" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-672947" class="wp-image-672947" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak08-1.png" alt="" width="640" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak08-1.png 1010w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak08-1-300x151.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/keycloak08-1-768x388.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-672947" class="wp-caption-text"&gt;Figure 8: Our simulated HTTP POST request.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The result would be a valid JWT token:&lt;/p&gt; &lt;pre&gt;{ "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiAwNjEwLCJpc3MiOiJodHRwO.......wKRTus6PAoHMFlIlYQ75dYiLzzuRMvdXkHl6naLNQ8wYDv4gi7A3eJ163YzXSJf5PmQ", "expires_in": 600, "refresh_expires_in": 1800, "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cC.......IsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIGVtYWlsIHByb2ZpbGUifQ.ePV2aqeDjlg6ih6SA7_x77gT4JYyv7HvK7PLQW-X1mM", "token_type": "bearer", "id_token": "eyJhbGciOiJSUz.......A_d_LV96VCLBeTJSpqeqpMJYlh4AMJqN6kddtrI4ixZLfwAIj-Qwqn9kzGe-v1-oe80wQXrXzVBG7TJbKm4x5bgCO_B9lnDMrey90rvaKKr48K697ug", "not-before-policy": 0, "session_state": "22c8278b-3346-468e-9533-f41f22ed264f", "scope": "openid email profile" }&lt;/pre&gt; &lt;p&gt;A wrong username and password combination results in an HTTP 401 response code and a response body like this:&lt;/p&gt; &lt;pre&gt;{ "error": "invalid_grant", "error_description": "Invalid user credentials" }&lt;/pre&gt; &lt;p&gt;There you go. Now you have a login API configured to work well with Keycloak. Have fun!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#38;linkname=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F29%2Fapi-login-and-jwt-token-generation-using-keycloak%2F&amp;#038;title=API%20login%20and%20JWT%20token%20generation%20using%20Keycloak" data-a2a-url="https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak/" data-a2a-title="API login and JWT token generation using Keycloak"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak/"&gt;API login and JWT token generation using Keycloak&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DnOP0NklMI0" height="1" width="1" alt=""/&gt;</content><summary>Red Hat single sign-on (SSO)—or its open source version, Keycloak—is one of the leading products for web SSO capabilities, and is based on popular standards such as Security Assertion Markup Language (SAML) 2.0, OpenID Connect, and OAuth 2.0. One of Red Hat SSO’s strongest features is that we can access Keycloak directly in many ways, whether through a simple HTML login form, or an API call. In th...</summary><dc:creator>Muhammad Edwin</dc:creator><dc:date>2020-01-29T08:00:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak/</feedburner:origLink></entry><entry><title>How to Install Red Hat Process Automation Manager 7.6 in Minutes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wGOcd7LnMnA/how-to-install-red-hat-process-automation-manager-76-in-minutes.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_red_hat_process_automation_manager_7_6_in_minutes</id><updated>2020-01-29T06:00:11Z</updated><published>2020-01-29T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div&gt;&amp;nbsp;&lt;a href="https://1.bp.blogspot.com/-XtYIWE6HERs/XhNb1fqEqwI/AAAAAAAAw2A/SymJTAO25ts4tEjkEWGMA4dJl09Vi3HQwCNcBGAsYHQ/s1600/rhpam-login.png" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-original-height="927" data-original-width="1600" height="185" src="https://1.bp.blogspot.com/-XtYIWE6HERs/XhNb1fqEqwI/AAAAAAAAw2A/SymJTAO25ts4tEjkEWGMA4dJl09Vi3HQwCNcBGAsYHQ/s320/rhpam-login.png" title="" width="320" /&gt;&lt;/a&gt;While you've seen the many &lt;a href="http://www.schabell.org/search/label/OpenShift" target="_blank"&gt;developer tooling articles&lt;/a&gt; where I've helped you to &lt;a href="https://gitlab.com/redhatdemocentral" target="_blank"&gt;get started on the OpenShift Container Platform&lt;/a&gt;, there is still a basic need to run our tooling locally on our own machine.&lt;br /&gt;&lt;br /&gt;With that in mind, here's an update that installs the latest version of open source process automation tooling for your development projects in just minutes on your very own machine.&lt;br /&gt;&lt;br /&gt;Not only that, it's done in just three easy steps and done in a few minutes!&lt;br /&gt;&lt;br /&gt;See if I'm telling the truth, let's install it now.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Just three easy steps to a fully installed and configured Red Hat Process Automation manager.&lt;br /&gt;&lt;h2 data-sourcepos="6:1-8:122" dir="auto"&gt;Install on your machine&lt;/h2&gt;&lt;a href="https://1.bp.blogspot.com/-2AAONrobo6Y/XhNbzlLbFYI/AAAAAAAAw18/UBkTqMie9dY-dEyUGSzMQLkFvFfRW_EZACNcBGAsYHQ/s1600/rhpam-business-central.png" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat process automation manager" border="0" data-original-height="935" data-original-width="1600" height="186" src="https://1.bp.blogspot.com/-2AAONrobo6Y/XhNbzlLbFYI/AAAAAAAAw18/UBkTqMie9dY-dEyUGSzMQLkFvFfRW_EZACNcBGAsYHQ/s320/rhpam-business-central.png" title="" width="320" /&gt;&lt;/a&gt;There are a few component you'll need to download for free from the provided developers site, then obtain the project linked below, add the downloads, and run the installation script.&lt;br /&gt;&lt;br /&gt;Watch the installation unfold before your eyes, with configuration, settings, and user creation all detailed in the script output so you can learn from the installation.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Give it a try with these three steps: &lt;br /&gt;&lt;ol data-sourcepos="8:1-17:0" style="text-align: left;"&gt;&lt;li data-sourcepos="8:1-9:0"&gt;&lt;div data-sourcepos="8:4-8:122"&gt;&lt;a href="https://gitlab.com/bpmworkshop/rhpam-install-demo/-/archive/master/rhpam-install-demo-master.zip"&gt;Download and unzip.&lt;/a&gt;&lt;/div&gt;&lt;div data-sourcepos="8:4-8:122"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="10:1-11:0"&gt;&lt;div data-sourcepos="10:4-10:81"&gt;Add products to installs directory, see installs/README for details and links.&lt;/div&gt;&lt;div data-sourcepos="10:4-10:81"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-sourcepos="14:1-15:0"&gt;&lt;div data-sourcepos="12:4-12:92"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges.&lt;/div&gt;&lt;div data-sourcepos="12:4-12:92"&gt;&lt;br /&gt;&lt;/div&gt;&amp;nbsp;Login to &lt;a href="http://localhost:8080/business-central" rel="nofollow noreferrer noopener" target="_blank"&gt;http://localhost:8080/business-central&lt;/a&gt; (u:erics / p:redhatpam1!)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;That's it, not it's time to enjoy your installed and configured Red Hat Process Automation Manager.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;Not sure how to get started with process automation? Try one of these &lt;a href="https://bpmworkshop.gitlab.io/index-redhat.html#/3" rel=" noreferrer noopener" target="_blank"&gt;online workshops&lt;/a&gt; to build a first project from scratch.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=L5ChD1I3HUA:f4iLUSBG3lM:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=L5ChD1I3HUA:f4iLUSBG3lM:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=L5ChD1I3HUA:f4iLUSBG3lM:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=L5ChD1I3HUA:f4iLUSBG3lM:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=L5ChD1I3HUA:f4iLUSBG3lM:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/L5ChD1I3HUA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wGOcd7LnMnA" height="1" width="1" alt=""/&gt;</content><summary> While you've seen the many developer tooling articles where I've helped you to get started on the OpenShift Container Platform, there is still a basic need to run our tooling locally on our own machine. With that in mind, here's an update that installs the latest version of open source process automation tooling for your development projects in just minutes on your very own machine. Not only that...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-01-29T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/L5ChD1I3HUA/how-to-install-red-hat-process-automation-manager-76-in-minutes.html</feedburner:origLink></entry><entry><title>First alpha of JGroups 5.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JxJeRrg6d1s/first-alpha-of-jgroups-50.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><category term="jgroups 5 message types" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-first_alpha_of_jgroups_5_0</id><updated>2020-01-28T09:14:35Z</updated><published>2020-01-28T09:14:00Z</published><content type="html">Howdy folks!&lt;br /&gt;&lt;br /&gt;Today I'm very happy to announce the first alpha version of JGroups 5.0!&lt;br /&gt;&lt;br /&gt;JGroups 5.0 has major API changes and I'd like people to try it out and give feedback before we release final.&lt;br /&gt;&lt;br /&gt;Note that there might still be more API changes before the first beta.&lt;br /&gt;&lt;br /&gt;So what's new in 5?&lt;br /&gt;&lt;br /&gt;The biggest change is that Message is now an interface [1] and we have a number of message classes implementing it, e.g.:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/BytesMessage.java"&gt;BytesMessage&lt;/a&gt;: this is the replacement for the old 4.x Message class, having a byte array as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/ObjectMessage.java"&gt;ObjectMessage&lt;/a&gt;: accepts an object as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/NioMessage.java"&gt;NioMessage&lt;/a&gt;: has an NIO ByteBuffer as payload.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/EmptyMessage.java"&gt;EmptyMessage&lt;/a&gt;: this class has *no* payload at all! Useful when sending around messages that have only headers, e.g. heartbeats. Used mainly by JGroups internally. This class has a smaller memory footprint.&lt;/li&gt;&lt;li&gt;&lt;a href="https://github.com/belaban/JGroups/blob/master/src/org/jgroups/CompositeMessage.java"&gt;CompositeMessage&lt;/a&gt;: message type which carries other messages&lt;/li&gt;&lt;/ul&gt;The advantage is different message types is that rather than having to marshal payloads into a byte array, as in 4.x Messages, the payload is now added to the message without marshalling. Marshalling is only done just before sending the message on the network.&lt;br /&gt;&lt;br /&gt;This &lt;a href="http://www.jgroups.org/manual5/index.html#_late_marshalling"&gt;late marshalling&lt;/a&gt; saves one memory allocation.&lt;br /&gt;&lt;br /&gt;The other advantage is that applications can &lt;a href="http://www.jgroups.org/manual5/index.html#MessageFactory"&gt;register their own messages types&lt;/a&gt;. This means that we can control how a message is created, e.g. using off-heap memory rather than heap memory.&lt;br /&gt;&lt;br /&gt;Other changes include:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;I've removed a lot of deprecated cruft, e.g. several AuthToken implementations, SASL, S3_PING and GOOGLE_PING (they have better replacements).&lt;/li&gt;&lt;li&gt;Java 11 is now the baseline. The current Alpha1 still runs under Java 8, but I expect this to change, perhaps only with 5.1. But at least, I reserve the right to use Java 11 specific language features, so be warned :-)&lt;/li&gt;&lt;/ul&gt;The full list of 5.0 is here: [2].&lt;br /&gt;&lt;br /&gt;I still have a few JIRAs to resolve before releasing 5.0.0.Final, and then I'll add new functionality (without API changes) in a bunch of minor releases. I've planned 5.1 - 5.3 so far.&lt;br /&gt;&lt;br /&gt;The documentation is here: [3].&lt;br /&gt;&lt;br /&gt;For feedback please use the &lt;a href="http://groups.google.com/forum/#!forum/jgroups-dev"&gt;mailing list&lt;/a&gt; [4].&lt;br /&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="http://www.jgroups.org/manual5/index.html#Message"&gt;http://www.jgroups.org/manual5/index.html#Message&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="https://issues.redhat.com/projects/JGRP/versions/12334686"&gt;https://issues.redhat.com/projects/JGRP/versions/12334686&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="http://www.jgroups.org/manual5/index.html"&gt;http://www.jgroups.org/manual5/index.html&lt;/a&gt;&lt;br /&gt;[4] &lt;a href="http://groups.google.com/forum/#!forum/jgroups-dev"&gt;http://groups.google.com/forum/#!forum/jgroups-dev&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JxJeRrg6d1s" height="1" width="1" alt=""/&gt;</content><summary>Howdy folks! Today I'm very happy to announce the first alpha version of JGroups 5.0! JGroups 5.0 has major API changes and I'd like people to try it out and give feedback before we release final. Note that there might still be more API changes before the first beta. So what's new in 5? The biggest change is that Message is now an interface [1] and we have a number of message classes implementing ...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2020-01-28T09:14:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html</feedburner:origLink></entry><entry><title>Use Red Hat OpenShift’s built-in OAuth server as an authentication provider in Open Liberty</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EyurAeOI-0E/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="microprofile metric" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="oauth" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="OpenLiberty" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="Red Hat Runtimes" scheme="searchisko:content:tags" /><author><name>Tom Jennings</name></author><id>searchisko:content:id:jbossorg_blog-use_red_hat_openshift_s_built_in_oauth_server_as_an_authentication_provider_in_open_liberty</id><updated>2020-01-28T08:00:54Z</updated><published>2020-01-28T08:00:54Z</published><content type="html">&lt;p&gt;In &lt;a href="https://openliberty.io/about/" target="_blank" rel="noopener noreferrer"&gt;Open Liberty&lt;/a&gt; 20.0.0.1, you can configure the Social Login feature to use &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;’s OAuth server for authentication. In addition, there is a new MicroProfile Metric to measure CPU time, memory heap and response time. This release also offers faster application startups with Liberty annotation caching, and an updated JavaServer Face.&lt;/p&gt; &lt;h2 id="run"&gt;Run your apps using 20.0.0.1&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/maven-intro.html" target="_blank" rel="noopener noreferrer"&gt;Maven&lt;/a&gt;, here are the coordinates:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.openliberty&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;openliberty-runtime&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;20.0.0.1&amp;#60;/version&amp;#62; &amp;#60;type&amp;#62;zip&amp;#60;/type&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;p&gt;If you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/gradle-intro.html" target="_blank" rel="noopener noreferrer"&gt;Gradle&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;dependencies { libertyRuntime group: 'io.openliberty', name: 'openliberty-runtime', version: '[20.0.0.1,)' }&lt;/pre&gt; &lt;p&gt;Or, if you&amp;#8217;re using &lt;a href="https://openliberty.io/guides/containerize.html" target="_blank" rel="noopener noreferrer"&gt;Docker&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;FROM open-liberty&lt;/pre&gt; &lt;h2&gt;Use Liberty Social Login with Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;The Social Login feature &lt;code&gt;socialLogin-1.0&lt;/code&gt; can now be configured to use OpenShift’s built-in OAuth server and the OAuth Proxy sidecar as authentication providers. The Social Login feature has several pre-configured providers (e.g., Google, GitHub, and Facebook) but you can also configure additional providers (e.g. Instagram). OpenShift&amp;#8217;s OAuth server and OAuth Proxy sidecar can now be configured as additional providers too. The first is a standard OAuth Authorization Code flow, where a web browser accessing an app running in Liberty is redirected to the OpenShift OAuth server to authenticate. The second accepts an inbound token from the OpenShift OAuth Proxy sidecar or obtains one from an OpenShift API call. This second approach requires less cluster-specific configuration.&lt;/p&gt; &lt;p&gt;Most people using this feature will run Liberty in a pod. However, in the Authorization Code flow, Liberty can run outside the OpenShift cluster. In either mode, an optional JWT can be created for propagation to downstream services.&lt;/p&gt; &lt;p&gt;Using OpenShift as a provider differs slightly from other OAuth providers, in that it requires a service account token to obtain information about the OAuth tokens. Once the client ID, secret, and token have been obtained from OpenShift, Liberty can be configured.&lt;/p&gt; &lt;p&gt;To enable your server to use an OpenShift OAuth server, add it to the &lt;code&gt;server.xml&lt;/code&gt;file like this:&lt;/p&gt; &lt;pre&gt; &amp;#60;server description="social"&amp;#62; &amp;#60;!-- Enable features --&amp;#62; &amp;#60;featureManager&amp;#62; &amp;#60;feature&amp;#62;appSecurity-3.0&amp;#60;/feature&amp;#62; &amp;#60;feature&amp;#62;socialLogin-1.0&amp;#60;/feature&amp;#62; &amp;#60;/featureManager&amp;#62; &amp;#60;logging traceSpecification="com.ibm.ws.security.*=all=enabled" maxFiles="8" maxFileSize="200"/&amp;#62; &amp;#60;httpEndpoint id="defaultHttpEndpoint" host="*" httpPort="8941" httpsPort="8946" &amp;#62; &amp;#60;tcpOptions soReuseAddr="true" /&amp;#62; &amp;#60;/httpEndpoint&amp;#62; &amp;#60;!-- specify your clientId, clientSecret and userApiToken as liberty variables or environment variables --&amp;#62; &amp;#60;oauth2Login id="openshiftLogin" scope="user:full" clientId="${myclientId}" clientSecret="${myclientSecret}" authorizationEndpoint="https://oauth-openshift.apps.papains.os.fyre.ibm.com/oauth/authorize" tokenEndpoint="https://oauth-openshift.apps.papains.os.fyre.ibm.com/oauth/token" userNameAttribute="username" groupNameAttribute="groups" userApiToken="${serviceAccountToken}" userApiType="kube" userApi="https://api.papains.os.fyre.ibm.com:6443/apis/authentication.k8s.io/v1/tokenreviews"&amp;#62; &amp;#60;/oauth2Login&amp;#62; &amp;#60;keyStore id="defaultKeyStore" password="keyspass" /&amp;#62; &amp;#60;!-- more application config would go here --&amp;#62; &amp;#60;/server&amp;#62;&lt;/pre&gt; &lt;p&gt;In the sidecar scenario, the configuration changes to accept an inbound token from the sidecar. To set up your server to use an OAuth proxy sidecar:&lt;/p&gt; &lt;pre&gt; &amp;#60;!-- specify your userApiToken as a liberty variable or environment variable --&amp;#62; &amp;#60;!-- note that no clientId or clientSecret are needed --&amp;#62; &amp;#60;oauth2Login id="openshiftLogin" scope="user:full" userNameAttribute="username" groupNameAttribute="groups" userApiToken="${serviceAccountToken}" userApiType="kube" accessTokenHeaderName="X-Forwarded-Access-Token" accessTokenRequired="true" userApi="https://kubernetes.default.svc/apis/authentication.k8s.io/v1/tokenreviews"&amp;#62; &amp;#60;/oauth2Login&amp;#62;&lt;/pre&gt; &lt;p&gt;Using HTTPS communication requires one of two things. You can either give your server a key signed by a well-known certificate authority, which Liberty can trust automatically, or you can add the server&amp;#8217;s public key to the Liberty trust store. OpenShift does not come with CA-signed keys by default, so the Red Hat OpenShift OAuth server&amp;#8217;s public key needs to be added. The most convenient way to do this is to specify an environment variable in &lt;code&gt;server.env&lt;/code&gt;, like so:&lt;/p&gt; &lt;pre&gt; # server.env # OAuth sidecar scenario: causes the Kubernetes default certificate that is pre-installed in pods to be added to Liberty trust store. cert_defaultKeyStore=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt # OAuth server scenario: causes the public keys from /tmp/trustedcert.pem (obtained seperetly) to be added to Liberty trust store. cert_defaultKeyStore=/tmp/trustedcert.pem&lt;/pre&gt; &lt;h2&gt;Monitor the process CPU time (MicroProfile Metrics 2.0)&lt;/h2&gt; &lt;p&gt;A new metric, &lt;code&gt;processCpuTime,&lt;/code&gt; which returns the CPU time used by the process on which the JVM is running. The MicroProfile Metrics feature provides information monitoring an application, such as CPU time used, memory heaps, and servlet response time.&lt;/p&gt; &lt;p&gt;The new &lt;code&gt;processCpuTime&lt;/code&gt; metric provides a more accurate CPU load percentage on cloud platforms via Grafana. Previously, the CPU load percentage was shown with the metric &lt;code&gt;processCpuLoad&lt;/code&gt;. However, the load percentage was calculated using the total number of cores allocated to the deployment. If the deployment has a restricted number of cores, the &lt;code&gt;processCpuLoad&lt;/code&gt; ends up showing a plateau on Grafana when the maximum number of cores is reached. For example, on a deployment with 32 cores allocated but restricted to four cores, the &lt;code&gt;processCpuLoad&lt;/code&gt; graph shows a plateau at 12.5% when all four cores are used.&lt;/p&gt; &lt;p&gt;The new metric, &lt;code&gt;processCpuTime,&lt;/code&gt; can be manipulated on Grafana to create a more accurate representation of the CPU use. The PromQL query &lt;code&gt;rate(processCpuTime)[1m]&lt;/code&gt; shows the average rate of increase in CPU time over one minute. Dividing this result by the total number of CPU cores, we can see a more accurate percentage of the CPU used, taking into account the constraints.&lt;/p&gt; &lt;p&gt;The new &lt;code&gt;processCpuTime&lt;/code&gt; metric is displayed on the &lt;code&gt;/metrics&lt;/code&gt; endpoint with the MicroProfile Metrics 2.0 and 2.2 features. On the &lt;a href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics" target="_blank" rel="noopener noreferrer"&gt;dashboard&lt;/a&gt;, a new panel can be created with the following PromQL query:&lt;/p&gt; &lt;p&gt;&lt;code&gt;(rate(base:cpu_process_cpu_time[1m])/1e9) / base:cpu_available_processors{app=~[[app]]}&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/OpenLiberty/open-liberty-operator/tree/master/deploy/dashboards/metrics" target="_blank" rel="noopener noreferrer"&gt;View full dashboard.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Start your applications faster with Liberty annotation caching&lt;/h2&gt; &lt;p&gt;Application startup time is now faster due to adding cache capabilities &lt;code&gt;annotation caching&lt;/code&gt; to core class and annotation scanning function. Depending on application characteristics, startup times are reduced by 10% to more than 50%. Applications with many jar files, or that use CDI or JAX-RS functions, see the best improvements, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_678627" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-678627" class="wp-image-678627" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache.png" alt="Graph showing the startup time boosts broken out by context" width="639" height="393" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache.png 776w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache-300x184.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/20001annocache-768x472.png 768w" sizes="(max-width: 639px) 100vw, 639px" /&gt;&lt;p id="caption-attachment-678627" class="wp-caption-text"&gt;Figure 1: Annotation caching boosts startup times.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Good news! Annotation caching is enabled by default.&lt;/p&gt; &lt;p&gt;Annotation cache data is stored in the server&amp;#8217;s work area. The cache of application class data is cleared when performing a clean server start (starting the server with the &lt;code&gt;--clean&lt;/code&gt; option). In normal operations, the clearing of cache data is not necessary, since the cache automatically regenerates cache data for changed application classes.&lt;/p&gt; &lt;p&gt;In container environments, for annotation caching to be effective, the server image must be &lt;em&gt;warmed&lt;/em&gt; when the container image is created. Warming the server can be done by starting and stopping the server during the container build. Warming the image moves the annotation scan into the container build, meaning that you get optimal startup for container deployment. Using the &lt;code&gt;configure.sh&lt;/code&gt; file in the base &lt;code&gt;open-liberty&lt;/code&gt; docker images causes the server to be started and stopped during the container build.&lt;/p&gt; &lt;h2&gt;Bug fixes in JavaServer Faces 2.3&lt;/h2&gt; &lt;p&gt;JavaServer Faces 2.3 contains a new feature to load bug fixes that are in Apache MyFaces 2.3.6. The &lt;code&gt;jsf-2.3&lt;/code&gt; feature pulls the Apache MyFaces implementation and integrates it into the Liberty runtime.&lt;/p&gt; &lt;p&gt;The Apache MyFaces 2.3.6 release contains bug fixes. View &lt;a href="https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=10600&amp;#38;version=12346352" target="_blank" rel="noopener noreferrer"&gt;the release notes for more information.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To use JSF 2.3, enable the &lt;code&gt;jsf-2.3&lt;/code&gt; feature to leverage the latest Apache MyFaces 2.3.x release. For more information about the JavaServer feature, view the &lt;a href="https://myfaces.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache website&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Try Open Liberty 20.0.0.1 in Red Hat Runtimes now&lt;/h2&gt; &lt;p&gt;Open Liberty is part of the Red Hat Runtimes offering. If you&amp;#8217;re a &lt;a href="https://access.redhat.com/products/red-hat-runtimes" target="_blank" rel="noopener noreferrer"&gt;Red Hat Runtimes subscriber&lt;/a&gt;, you can try Open Liberty now.&lt;/p&gt; &lt;p&gt;To learn more about deploying Open Liberty applications to OpenShift, take a look at our &lt;a href="https://openliberty.io/guides/cloud-openshift.html" target="_blank" rel="noopener noreferrer"&gt;Open Liberty guide: Deploying microservices to OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#38;linkname=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fuse-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty%2F&amp;#038;title=Use%20Red%20Hat%20OpenShift%E2%80%99s%20built-in%20OAuth%20server%20as%20an%20authentication%20provider%20in%20Open%20Liberty" data-a2a-url="https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/" data-a2a-title="Use Red Hat OpenShift’s built-in OAuth server as an authentication provider in Open Liberty"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/"&gt;Use Red Hat OpenShift&amp;#8217;s built-in OAuth server as an authentication provider in Open Liberty&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EyurAeOI-0E" height="1" width="1" alt=""/&gt;</content><summary>In Open Liberty 20.0.0.1, you can configure the Social Login feature to use Red Hat OpenShift’s OAuth server for authentication. In addition, there is a new MicroProfile Metric to measure CPU time, memory heap and response time. This release also offers faster application startups with Liberty annotation caching, and an updated JavaServer Face. Run your apps using 20.0.0.1 If you’re using Maven, h...</summary><dc:creator>Tom Jennings</dc:creator><dc:date>2020-01-28T08:00:54Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/28/use-red-hat-openshifts-built-in-oauth-server-as-an-authentication-provider-in-open-liberty/</feedburner:origLink></entry><entry><title>Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/p6lKUkA-n-Q/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Fabric8 Maven plugin" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Jkube" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Rohan Kumar</name></author><id>searchisko:content:id:jbossorg_blog-introduction_to_eclipse_jkube_java_tooling_for_kubernetes_and_red_hat_openshift</id><updated>2020-01-28T08:00:33Z</updated><published>2020-01-28T08:00:33Z</published><content type="html">&lt;p&gt;We as Java developers are often busy working on our applications by optimizing application memory, speed, etc. In recent years, encapsulating our applications into lightweight, independent units called containers has become quite a trend, and almost every enterprise is trying to shift its infrastructure onto container technologies like Docker and &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Kubernetes is an open source system for automating deployment, scaling, and management of containerized applications, but it has a steep learning curve, and an application developer with no background in &lt;a href="https://developers.redhat.com/topics/devops/"&gt;DevOps&lt;/a&gt; can find this system a bit overwhelming. In this article, I will talk about tools that can help when deploying your Maven applications to Kubernetes/&lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;span id="more-669677"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Background: Eclipse JKube&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;This project was not built from scratch. It’s just a refactored and rebranded version of the &lt;a href="https://github.com/fabric8io/fabric8-maven-plugin" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Maven plugin&lt;/a&gt;, which was a Maven plugin used in the &lt;a href="http://fabric8.io" target="_blank" rel="noopener noreferrer"&gt;Fabric8&lt;/a&gt; ecosystem. Although the Fabric8 project was liked and appreciated by many people in the open source community, due to unfortunate reasons it could not become successful, and the idea of Fabric8 as an integrated development platform on top of Kubernetes died. Although the main project is archived, there are still active repositories used by the community, such as the &lt;a href="https://github.com/fabric8io/docker-maven-plugin" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Docker Maven plugin&lt;/a&gt;, the &lt;a href="https://github.com/fabric8io/kubernetes-client" target="_blank" rel="noopener noreferrer"&gt;Fabric8 Kubernetes client&lt;/a&gt;, and of course the Fabric8 Maven plugin.&lt;/p&gt; &lt;p&gt;As maintainers of the Fabric8 Maven plugin, we started decoupling the Fabric8 ecosystem related pieces from the plugin to make a general-purpose Kubernetes/OpenShift plugin. We also felt there was a need for rebranding because most people were confused about whether this plugin had something to do with Fabric8. Hence, we decided to rebrand it, and fortunately, someone from the Eclipse foundation approached us to take in our project. Now, the project is being renamed to Eclipse JKube and can be &lt;a href="https://github.com/eclipse/jkube" target="_blank" rel="noopener noreferrer"&gt;found in the Eclipse Foundation repos on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Eclipse JKube can be seen as a reincarnation of the Fabric8 Maven plugin. It contains the good parts of this plugin and offers a clean and smooth workflow with the tooling it provides. We refactored this plugin into three components:&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;The JKube Kit&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;The Kubernetes Maven plugin&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;The OpenShift Maven plugin&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The JKube Kit contains the core logic for building Docker images, generating Kubernetes/OpenShift manifests, and applying them onto Kubernetes/OpenShift clusters. Plugins consume this library for their operations. In the future, we also plan to add support for Gradle plugins.&lt;/p&gt; &lt;h2&gt;Example&lt;/h2&gt; &lt;p&gt;Now, let’s have a look at Eclipse JKube in action. For the demo, I will deploy a simple Spring Boot project onto Kubernetes using the &lt;a href="https://github.com/rohanKanojia/eclipse-jkube-demo-project" target="_blank" rel="noopener noreferrer"&gt;Eclipse Kubernetes Maven plugin&lt;/a&gt;. Let&amp;#8217;s walk through this process:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Add the Kubernetes Maven plugin as a dependency in your &lt;code&gt;pom.xml&lt;/code&gt; file, as shown in Figure 1:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669707" style="width: 436px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669707" class="wp-image-669707" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59.png" alt="The Kubernetes Maven plugin added as a dependency in pom.xml." width="426" height="89" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59.png 772w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59-300x63.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-22-59-768x161.png 768w" sizes="(max-width: 426px) 100vw, 426px" /&gt;&lt;p id="caption-attachment-669707" class="wp-caption-text"&gt;Figure 1: The Kubernetes Maven plugin added as a dependency in &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt; &lt;ol start="2"&gt; &lt;li&gt;Build your Docker images. The Eclipse JKube Kubernetes Maven plugin offers a zero-config mode, in which it builds your Docker image with opinionated defaults. However, you can customize it by providing an image configuration in the plugin configuration. In order to build a Docker image, you just need to run the following (the results are shown in Figure 2):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:build&lt;/pre&gt; &lt;div id="attachment_669727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669727" class="wp-image-669727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-1024x723.png" alt="The results of the Docker image build command." width="640" height="452" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-1024x723.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-300x212.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45-768x542.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-32-45.png 1282w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669727" class="wp-caption-text"&gt;Figure 2: Building the Docker image.&lt;/p&gt;&lt;/div&gt; &lt;ol start="3"&gt; &lt;li&gt;Generate your Kubernetes resource manifests. Eclipse JKube plugins have a powerful and configurable resource generation mechanism in which they can generate Kubernetes resources in zero-config mode. This feature can also be configured using XML configuration or by placing customized resource fragments in the &lt;code&gt;src/main/jkube&lt;/code&gt; directory. The results are merged with the finally generated resource fragments. In order to generate resources, run the following (the results are shown in Figure 3):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:resource&lt;/pre&gt; &lt;div id="attachment_669717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669717" class="wp-image-669717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-1024x363.png" alt="The results of the resource manifest creation command." width="640" height="227" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-1024x363.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-300x106.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13-768x273.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-39-13.png 1513w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669717" class="wp-caption-text"&gt;Figure 3: Creating the Kubernetes resource manifests.&lt;/p&gt;&lt;/div&gt; &lt;ol start="4"&gt; &lt;li&gt;Apply generated Kubernetes resources onto the Kubernetes cluster. In order to apply resources onto this cluster, you just need to run one of the following (the results are shown in Figure 4):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:apply&lt;/pre&gt; &lt;p style="text-align: left; padding-left: 40px;"&gt;or:&lt;/p&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:deploy&lt;/pre&gt; &lt;div id="attachment_669737" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669737" class="wp-image-669737 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-300x244.png" alt="The results of the command to apply the generated Kubernetes resources onto the Kubernetes cluster." width="300" height="244" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-300x244.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30-768x625.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-50-30.png 987w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p id="caption-attachment-669737" class="wp-caption-text"&gt;Figure 4: Applying the generated Kubernetes resources onto the Kubernetes cluster.&lt;/p&gt;&lt;/div&gt; &lt;ol start="5"&gt; &lt;li&gt;Undeploy your Maven application from Kubernetes. We have a cleanup goal, too, which just deletes all resources created during the deploy phase. To use this feature, run the following (the results are shown in Figure 5):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:undeploy&lt;/pre&gt; &lt;div id="attachment_669747" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669747" class="wp-image-669747 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-300x182.png" alt="The results of undeploying your Maven application from Kubernetes." width="300" height="182" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-300x182.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11-768x467.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-53-11.png 943w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;p id="caption-attachment-669747" class="wp-caption-text"&gt;Figure 5: Undeploying your Maven application from Kubernetes.&lt;/p&gt;&lt;/div&gt; &lt;ol start="6"&gt; &lt;li&gt;Debug your Java application inside Kubernetes. Apart from these goals, we also have a goal for remote debugging. Suppose that you see a bug inside your application that&amp;#8217;s running inside Kubernetes and you want to debug its behavior. You can simply run our debug goal, which does port forwarding for debugging:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="text-align: left; padding-left: 40px;"&gt;mvn k8s:debug&lt;/pre&gt; &lt;ol start="7"&gt; &lt;li&gt;Configure your IDE in order to connect to this open port for debugging, as shown in Figure 6:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669757" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669757" class="wp-image-669757 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-1024x576.png" alt="A configuration window open in the IDE." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-18-59-41-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669757" class="wp-caption-text"&gt;Figure 6: Configuring your IDE to debug your Java application inside Kubernetes via Maven.&lt;/p&gt;&lt;/div&gt; &lt;ol start="8"&gt; &lt;li&gt;Set a breakpoint in the application code and hit the application endpoint. We can see the breakpoint being hit in IDE as shown in Figure 7:&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_669767" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-669767" class="wp-image-669767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-1024x576.png" alt="The IDE hitting the application's breakpoint." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/Screenshot-from-2019-12-19-19-00-59-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-669767" class="wp-caption-text"&gt;Figure 7: The application&amp;#8217;s breakpoint in your IDE.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With this result, I wrap up this article. We do have more in our pipeline, so stay tuned for new updates. If you want to get involved, please reach out to us via our mailing list at &lt;a href="mailto:jkube-dev@eclipse.org" target="_blank" rel="noopener noreferrer"&gt;jkube-dev@eclipse.org&lt;/a&gt;, or our Gitter channel at &lt;a href="https://gitter.im/eclipse/jkube#" target="_blank" rel="noopener noreferrer"&gt;https://gitter.im/eclipse/jkube#&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F28%2Fintroduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift%2F&amp;#038;title=Introduction%20to%20Eclipse%20JKube%3A%20Java%20tooling%20for%20Kubernetes%20and%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/" data-a2a-title="Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/"&gt;Introduction to Eclipse JKube: Java tooling for Kubernetes and Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/p6lKUkA-n-Q" height="1" width="1" alt=""/&gt;</content><summary>We as Java developers are often busy working on our applications by optimizing application memory, speed, etc. In recent years, encapsulating our applications into lightweight, independent units called containers has become quite a trend, and almost every enterprise is trying to shift its infrastructure onto container technologies like Docker and Kubernetes. Kubernetes is an open source system for...</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2020-01-28T08:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/28/introduction-to-eclipse-jkube-java-tooling-for-kubernetes-and-red-hat-openshift/</feedburner:origLink></entry><entry><title>JBoss Tools 4.14.0.AM1 for Eclipse 2019-12</title><link rel="alternate" type="text/html" href="http://feedproxy.google.com/~r/jbossbuzz/~3/86eoci9vDZQ/4.14.0.am1.html" /><category term="release" /><category term="jbosstools" /><category term="devstudio" /><category term="jbosscentral" /><author><name>jeffmaury</name></author><id>https://tools.jboss.org/blog/4.14.0.am1.html</id><updated>2020-01-31T06:38:49Z</updated><published>2020-01-28T00:00:00Z</published><content type="html">&lt;div&gt;&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Happy to announce 4.14.0.AM1 (Developer Milestone 1) build for Eclipse 2019-12.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Downloads available at &lt;a href="https://tools.jboss.org/downloads/jbosstools/2019-12/4.14.0.AM1.html"&gt;JBoss Tools 4.14.0 AM1&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-is-new"&gt;&lt;a class="anchor" href="#what-is-new"&gt;&lt;/a&gt;What is New?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Full info is at &lt;a href="https://tools.jboss.org/documentation/whatsnew/jbosstools/4.14.0.AM1.html"&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="quarkus-tools"&gt;&lt;a class="anchor" href="#quarkus-tools"&gt;&lt;/a&gt;Quarkus Tools&lt;/h3&gt; &lt;div class="sect3"&gt; &lt;h4 id="quarkus-tools-added-to-jboss-tools"&gt;&lt;a class="anchor" href="#quarkus-tools-added-to-jboss-tools"&gt;&lt;/a&gt;Quarkus Tools added to JBoss Tools&lt;/h4&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new component has been added to JBoss Tools. Quarkus Tools. It aims at providing tools for Quarkus applications developers. The initial set of features is:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Wizard for creating Quarkus projects based on &lt;a href="https://code.quarkus.io"&gt;code.quarkus.io&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Code completion and syntax validation on &lt;strong&gt;application.properties&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Launching your Quarkus application in Run/Debug mode&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="sect5"&gt; &lt;h6 id="quarkus-project-creation-wizard"&gt;&lt;a class="anchor" href="#quarkus-project-creation-wizard"&gt;&lt;/a&gt;Quarkus project creation wizard&lt;/h6&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A new wizard has been added to create a new Quarkus application project in your workspace. In order to launch it, first enter Ctrl+N to get the list of available wizards&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus1.png" alt="quarkus1" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the filter text box, enter the &lt;code&gt;&lt;code&gt;qu&lt;/code&gt;&lt;/code&gt; characters to filter the list of wizards:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus2.png" alt="quarkus2" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Select the &lt;strong&gt;Quarkus Project&lt;/strong&gt; wizard and click the &lt;strong&gt;Next&lt;/strong&gt; button:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus3.png" alt="quarkus3" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;strong&gt;Project type&lt;/strong&gt; combo allows you to choose between Maven or Gradle tool used to manage your project. We’ll go with Maven for this tutorial.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enter a project name (we will use code-with-quarkus) and click the &lt;strong&gt;Next&lt;/strong&gt; button:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus4.png" alt="quarkus4" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This dialog allows you to choose various parameters for you project, like the project coordinates (group id, artifact id and version) along with the base REST endpoint information. We’ll use the default so click on the &lt;strong&gt;Next&lt;/strong&gt; button:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus5.png" alt="quarkus5" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This dialog allows to select which Quarkus extensions you want to add to your project. The extensions are grouped by categories, so first select a specific category in the left table. We will choose the &lt;strong&gt;Web&lt;/strong&gt; one:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus6.png" alt="quarkus6" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You should have noticed that the middle table has been updated. In order to add an extension, double click on the extension in the middle table. We will add &lt;strong&gt;RESTEasy JAX-RS&lt;/strong&gt; and &lt;strong&gt;RESTEasy Qute&lt;/strong&gt; (a templating engine):&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus7.png" alt="quarkus7" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You should have noticed that the extensions that you double clicked on are now being added to the right table. If you want to remove an extension from the list of selected ones, double click again either in the center table or in the right table.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We are now all set so click on the &lt;strong&gt;Finish&lt;/strong&gt; button to launch the project creation. The project creation job is then launched, dependencies are being retrieved and after a while, the new project will appear in the &lt;strong&gt;Project Explorer&lt;/strong&gt; window:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus8.png" alt="quarkus8" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We have successfully created our first Quarkus project. Let’s see now how we can launch this application and debug it.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect5"&gt; &lt;h6 id="running-the-quarkus-application"&gt;&lt;a class="anchor" href="#running-the-quarkus-application"&gt;&lt;/a&gt;Running the Quarkus application&lt;/h6&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Running a Quarkus application can be done from the workbench Run configurations. Select the &lt;strong&gt;Run → Run Configurations…​&lt;/strong&gt; menu to display the dialog allowing to create a Run configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus9.png" alt="quarkus9" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Scrool down until the &lt;strong&gt;Quarkus Launch Configuration&lt;/strong&gt; is visible and select it:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus10.png" alt="quarkus10" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Click on the &lt;strong&gt;New configuration&lt;/strong&gt; button (top left):&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus11.png" alt="quarkus11" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;A workspace project needs to be associated with the configuration so click on the &lt;strong&gt;Browse&lt;/strong&gt; button to see the project selection dialog:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus12.png" alt="quarkus12" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As the workspace contains a single project, it is automatically selected and we can click on the &lt;strong&gt;OK&lt;/strong&gt; button:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus13.png" alt="quarkus13" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The configuration is not ready to be used. So let’s start our Quarkus application by clicking on the &lt;strong&gt;Run&lt;/strong&gt; button:&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You should see a new Console being displayed.&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus14.png" alt="quarkus14" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The application is being built and after a while, it will be started:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus15.png" alt="quarkus15" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect5"&gt; &lt;h6 id="debugging-the-quarkus-application"&gt;&lt;a class="anchor" href="#debugging-the-quarkus-application"&gt;&lt;/a&gt;Debugging the Quarkus application&lt;/h6&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Debugging a Quarkus application is just a simple as launching the previous configuration we’ve just created in Debug. You just need to open the &lt;strong&gt;Run → Debug Configurations…​&lt;/strong&gt;. menu and click on the &lt;strong&gt;Debug&lt;/strong&gt; button.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It will start the Quarkus application like in the previous paragraph but also connect a remote JVM debug configuration to your running Quarkus application. So if you have set breakpoints in your application source files, the execution will automatically stops there.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect5"&gt; &lt;h6 id="application-properties-content-assist"&gt;&lt;a class="anchor" href="#application-properties-content-assist"&gt;&lt;/a&gt;application.properties content assist&lt;/h6&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Every Quarkus application is configured through a configuration called &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The content of this configuration file is dependent of the set of Quarkus extensions that your application is using. Some settings are mandatory, some others are not and the possible values are specific to the nature of the setting: boolean, integer, limited set of values (enumerations).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So, as a developer, you need to look at various guides and documentations (the core Quarkus and the extension specific ones)&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So Quarkus Tools provides content assist on those specific files that:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;validates the content of the application.properties files&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;provides you with the possible setting names and values&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s see it in action.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Go to &lt;strong&gt;src/main/resources/application.properties&lt;/strong&gt; in the project and right click and select &lt;strong&gt;Open With → Generic Text Editor&lt;/strong&gt;:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus16.png" alt="quarkus16" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Go the third line of the file and invoke code completion (Ctrl + Space):&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus17.png" alt="quarkus17" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For each setting, a documentation is displayed when you mouse over the setting. Let try to add &lt;strong&gt;quarkus.http.port&lt;/strong&gt; to the file and mouse over this name:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus18.png" alt="quarkus18" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If we enter a wrong value (false instead of a numeric value), then the error will be highlighted:&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://tools.jboss.org/documentation/whatsnew/quarkus/images/quarkus19.png" alt="quarkus19" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is the first set of features that will be integration into the next version of JBoss Tools. We encourage you to used it and if you are missing features and/or enhancements, don’t hesitate to report them here: &lt;a href="https://issues.redhat.com/issues/?jql=project%20%3D%20JBIDE%20AND%20component%20%3D%20quarkus%20and%20status%20!%3D%20Closed%20and%20status%20!%3D%20Resolved%20"&gt;JBoss Tools issue tracker&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Jeff Maury&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/86eoci9vDZQ" height="1" width="1" alt=""/&gt;</content><summary>Happy to announce 4.14.0.AM1 (Developer Milestone 1) build for Eclipse 2019-12. Downloads available at JBoss Tools 4.14.0 AM1. What is New? Full info is at this page. Some highlights are below. Quarkus Tools Quarkus Tools added to JBoss Tools A new component has been added to JBoss Tools. Quarkus Tools. It aims at providing tools for Quarkus applications developers. The initial set of features is: Wizard for creating Quarkus projects based on code.quarkus.io Code completion and syntax validation on application.properties Launching your Quarkus application in Run/Debug mode Quarkus project creation wizard A new wizard has been added to create a new Quarkus application project in your workspace. In order to launch it, first...</summary><dc:creator>jeffmaury</dc:creator><dc:date>2020-01-28T00:00:00Z</dc:date><feedburner:origLink>https://tools.jboss.org/blog/4.14.0.am1.html</feedburner:origLink></entry><entry><title>Open Virtual Network unidling</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qNK4ZLZE8WM/" /><category term="Containers" scheme="searchisko:content:tags" /><category term="controller_event" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="OVN unidling" scheme="searchisko:content:tags" /><category term="OVS" scheme="searchisko:content:tags" /><author><name>Lorenzo Bianconi</name></author><id>searchisko:content:id:jbossorg_blog-open_virtual_network_unidling</id><updated>2020-01-27T08:00:43Z</updated><published>2020-01-27T08:00:43Z</published><content type="html">&lt;p&gt;Open Virtual Network (OVN) is a project born as a sub-component of &lt;a href="http://www.openvswitch.org/" target="_blank" rel="noopener noreferrer"&gt;Open vSwitch (OVS)&lt;/a&gt;, which is a performant, programmable, multi-platform virtual switch. OVN allows OVS users to natively create overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides methods for setting up Access Control Lists (ACLs) and network services such as DHCP. Many Red Hat products, like &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenStack Platform&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/virtualization/enterprise-virtualization" target="_blank" rel="noopener noreferrer"&gt;Red Hat Virtualization&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;, rely on OVN to configure network functionalities.&lt;/p&gt; &lt;p&gt;In this article, I will cover the OVN &lt;em&gt;unidling&lt;/em&gt; issue and how the proposed solution can be used to forward events to a CMS (e.g., OpenStack or OpenShift).&lt;/p&gt; &lt;p&gt;&lt;span id="more-667367"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Unidling problem: OpenShift use case&lt;/h2&gt; &lt;p&gt;A simplified OVN-Kubernetes deployment is shown in Figure 1. The overlay network is connected to an external one through a localnet port (&lt;code&gt;ln-public&lt;/code&gt;, in this case):&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_667397" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-667397" class="wp-image-667397 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-1024x567.png" alt="OVN-Kubernetes deployment network diagram" width="640" height="354" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-1024x567.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling-768x425.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/12/ovn-unidling.png 1052w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-667397" class="wp-caption-text"&gt;Figure 1: A simplified OVN-Kubernetes deployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Below is the related OVN NB database network configuration:&lt;/p&gt; &lt;pre&gt;switch e2564770-8658-4086-8f41-9995d5ff0da2 (sw1) port sw1-p0 addresses: ["00:00:00:00:00:33 192.168.2.11"] port lrp1-attachment type: router addresses: ["00:00:00:ff:00:02"] router-port: lrp1 switch 512be578-1c95-4ac0-b196-8f5ef38a1517 (sw0) port sw0-p0 addresses: ["00:00:00:00:00:11 192.168.1.11"] port sw0-p1 addresses: ["00:00:00:00:00:12 192.168.1.12"] port lrp0-attachment type: router addresses: ["00:00:00:ff:00:01"] router-port: lrp0 switch ee2b44de-7d2b-4ffa-8c4c-2e1ac7997639 (public) port ln-public type: localnet addresses: ["unknown"] port lrp2-attachment type: router addresses: ["00:00:00:00:ff:03"] router-port: lrp2 router 681dfe85-6f90-44e3-9dfe-f1c81f4cfa32 (lr0) port lrp2 mac: "00:00:00:00:ff:03" networks: ["192.168.3.254/24"] port lrp1 mac: "00:00:00:00:ff:02" networks: ["192.168.2.254/24"] port lrp0 mac: "00:00:00:00:ff:01" networks: ["192.168.1.254/24"] &lt;/pre&gt; &lt;p&gt;OVN Load Balancer (LB) services are used to demultiplex traffic between running pods. LB configuration is stored in the OVN Northd (OVN-NB) database&amp;#8217;s &lt;code&gt;Load_Balancer&lt;/code&gt; table:&lt;/p&gt; &lt;pre&gt;_uuid : 7381bdc2-cb26-40e9-93db-d7f733c8afbd external_ids : {} health_check : [] ip_port_mappings : {} name : lb0 protocol : tcp vips : {"192.168.1.100:80"="192.168.1.11:80,192.168.1.12:80"} &lt;/pre&gt; &lt;p&gt;However, after an inactivity timeout, a given pod can be powered down by OpenShift and the related backends are removed from the load balancer configuration, resulting in a Virtual IP (VIP) with no backends:&lt;/p&gt; &lt;pre&gt;_uuid : f93bca28-87b4-4d98-9193-b49644f15ee6 external_ids : {} health_check : [] ip_port_mappings : {} name : lb0 protocol : tcp vips : {"192.168.1.100:80"=""} &lt;/pre&gt; &lt;p&gt;As a consequence, the system results in a deadlock state, because a new packet for the suspended service will not be forwarded by OVN to the related pod without a proper network configuration.&lt;/p&gt; &lt;h2&gt;Proposed solution: &lt;code&gt;Controller_Event&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;In order to overcome this limitation, a &lt;a href="https://github.com/openvswitch/ovs/commit/f732a1ab9c574c1c17858a84cf7d25f294dfb151" target="_blank" rel="noopener noreferrer"&gt;solution&lt;/a&gt; has been proposed by which &lt;a href="https://github.com/ovn-org/ovn/blob/master/ovn-sb.ovsschema#L355" target="_blank" rel="noopener noreferrer"&gt;a new table&lt;/a&gt;, &lt;code&gt;Controller_Event&lt;/code&gt;, has been added to the OVN Southbound database. Moreover, new &lt;code&gt;trigger_event&lt;/code&gt; logical flows have been introduced into OVN pipelines in order to generate a &lt;em&gt;controller event&lt;/em&gt; whenever an IP packet for an LB rule with no backends is received by OVN:&lt;/p&gt; &lt;pre&gt; table=4 (ls_in_pre_lb ), priority=130 , match=(ip4.dst == 192.168.1.100 &amp;#38;&amp;#38; tcp &amp;#38;&amp;#38; tcp.dst == 80), action=(trigger_event(event = "empty_lb_backends", meter = "event-elb", vip = "192.168.1.100:80", protocol = "tcp", load_balancer = "38350663-862f-4aae-94e7-c0149e11d293");) &lt;/pre&gt; &lt;p&gt;The OVN &lt;code&gt;trigger_event&lt;/code&gt; action will convert an unsolicited event into a new row in the &lt;code&gt;Controller_Event&lt;/code&gt; table, allowing the CMS to be notified about the request for the &amp;#8220;suspended&amp;#8221; service:&lt;/p&gt; &lt;pre&gt;_uuid : c4d5493a-a630-47f8-adbb-e20a402e69de chassis : 24852cd2-bea6-48fd-b77a-95d2e47c836c event_info : {load_balancer="9d6542eb-6533-4d3c-b0a5-4e54826968b6", protocol=tcp, vip="192.168.1.100:80"} event_type : empty_lb_backends seq_num : 1 &lt;/pre&gt; &lt;p&gt;Recently, Controller Event has been also &lt;a href="https://github.com/ovn-org/ovn-kubernetes/commit/7a789d00f89e90f29bdba3abfab8a797c242c8dc" target="_blank" rel="noopener noreferrer"&gt;integrated into &lt;code&gt;ovn-kubernetes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Future development&lt;/h2&gt; &lt;p&gt;Since the proposed framework is not tied just to the unidling scenario, a possible future enhancement to the described methodology could be to extend the &lt;code&gt;trigger_event&lt;/code&gt; action in order to report more unsolicited events to the attention of the CMS in order to allow it to take necessary actions.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Check out these other articles related to OVN and OVS:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/08/how-to-create-an-open-virtual-network-distributed-gateway-router/"&gt;How to create an Open Virtual Network distributed gateway router&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/03/ovn-dynamic-ip-address-management/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part One&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/27/dynamic-ip-address-management-in-open-virtual-network-ovn-part-two/"&gt;Dynamic IP address management in Open Virtual Network (OVN): Part Two&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/23/non-root-open-vswitch-rhel/"&gt;Non-root Open vSwitch in RHEL&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/16/ovs-dpdk-hugepage-memory/"&gt;Open vSwitch-DPDK: How Much Hugepage Memory?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/06/27/open-vswitch-qinq-performance/"&gt;Open vSwitch: QinQ Performance&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/07/ip-packet-buffering-in-ovn/"&gt;IP packet buffering in OVN&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#38;linkname=Open%20Virtual%20Network%20unidling" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F01%2F27%2Fopen-virtual-network-unidling%2F&amp;#038;title=Open%20Virtual%20Network%20unidling" data-a2a-url="https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/" data-a2a-title="Open Virtual Network unidling"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/"&gt;Open Virtual Network unidling&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qNK4ZLZE8WM" height="1" width="1" alt=""/&gt;</content><summary>Open Virtual Network (OVN) is a project born as a sub-component of Open vSwitch (OVS), which is a performant, programmable, multi-platform virtual switch. OVN allows OVS users to natively create overlay networks by introducing virtual network abstractions such as virtual switches and routers. Moreover, OVN provides methods for setting up Access Control Lists (ACLs) and network services such as DHC...</summary><dc:creator>Lorenzo Bianconi</dc:creator><dc:date>2020-01-27T08:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/01/27/open-virtual-network-unidling/</feedburner:origLink></entry></feed>
