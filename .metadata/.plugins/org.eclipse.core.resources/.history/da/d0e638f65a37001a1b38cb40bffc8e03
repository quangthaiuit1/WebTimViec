package lixco.com.services;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import lixco.com.entities.Role_Permission;
import lixco.com.entities.User_Role;

@Stateless
@TransactionManagement(value = TransactionManagementType.CONTAINER)
public class Role_PermissionService extends AbstractService<Role_Permission>{
	
	@PersistenceContext
	private EntityManager em;
	 
	@Resource
	private SessionContext ct;
	@Override
	protected Class<Role_Permission> getEntityClass() {
		return Role_Permission.class;
	}

	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	@Override
	protected SessionContext getUt() {
		return ct;
	}

	
	public List<Role_Permission> findByRoleId(long role){
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
		Root<Role_Permission> root = cq.from(Role_Permission.class);
		cq.select(root).where(cb.equal(root.get("role").get("id"), role));
		TypedQuery<Role_Permission> query = em.createQuery(cq);
		List<Role_Permission> rolePermissions = query.getResultList();
		return rolePermissions;
	}
	public List<Role_Permission> find(long roleId, long permissionId, List<Long> roleIds, String permissionName){
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
		Root<Role_Permission> root = cq.from(Role_Permission.class);
		List<Predicate> queries = new ArrayList<>();


		if (roleId != 0 && permissionId == 0 && roleIds == null && permissionName == null) {
			Predicate userQuery = cb.equal(root.get("role").get("id"), roleId);
			queries.add(userQuery);
		}

		if (roleId == 0 && permissionId == 0 && roleIds != null && permissionName == null) {
			Predicate roleQuery = cb.in(root.get("role").get("id")).value(roleIds);
			queries.add(roleQuery);
		}
		if (userId != 0 && roleId != 0) {
			Predicate roleQuery = cb.equal(root.get("role").get("id"), roleId);
			Predicate userQuery = cb.equal(root.get("user").get("id"), userId);
			queries.add(roleQuery);
			queries.add(userQuery);
		}

		Predicate data[] = new Predicate[queries.size()];
		for (int i = 0; i < queries.size(); i++) {
			data[i] = queries.get(i);
		}
		Predicate finalPredicate = cb.and(data);
		cq.where(finalPredicate);
		TypedQuery<User_Role> query = em.createQuery(cq);
		return query.getResultList();
	}
	
	//Tim permission bang 1 list role(quyen)
	public List<Role_Permission> findPermissionByListRole(List<Long> roleIds){
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
			Root<Role_Permission> root = cq.from(Role_Permission.class);
			
			cq.select(root).where(cb.in(root.get("role").get("id")).value(roleIds));
			TypedQuery<Role_Permission> query = em.createQuery(cq);
			List<Role_Permission> rolePermissions = query.getResultList();
			return rolePermissions;
		} catch (Exception e) {
			
			return null;
		}
	}
	
	public List<Role_Permission> findPermissionByListEntityRole(Role_Permission roleIds){
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
			Root<Role_Permission> root = cq.from(Role_Permission.class);
			
			cq.select(root).where(cb.in(root.get("role")));
			TypedQuery<Role_Permission> query = em.createQuery(cq);
			List<Role_Permission> rolePermissions = query.getResultList();
			return rolePermissions;
		} catch (Exception e) {
			
			return null;
		}
	}
	
	//Tim cac quyen theo ten permission(form) va danh sach role
	public List<Role_Permission> findByPermissionNameAndRoleList(String permissionName,List<Long> roleIds){
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
		Root<Role_Permission> root = cq.from(Role_Permission.class);
		Predicate predicateForPermissionName
		  = cb.equal(root.get("permission").get("link"), permissionName);
		Predicate predicateForListRole
		  = cb.in(root.get("role").get("id")).value(roleIds);
		Predicate finalPredicate
		  = cb.and(predicateForListRole,predicateForPermissionName );
		cq.where(finalPredicate);
		TypedQuery<Role_Permission> query = em.createQuery(cq);
		List<Role_Permission> rolePermissions = query.getResultList();
		return rolePermissions;
	}
	
}