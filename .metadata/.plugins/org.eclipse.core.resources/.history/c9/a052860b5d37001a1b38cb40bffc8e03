package lixco.com.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import lixco.com.entities.Post_Job;
import lixco.com.entities.Role;
import lixco.com.entities.User;
import lixco.com.entities.User_Role;

@Stateless
@TransactionManagement(value = TransactionManagementType.CONTAINER)
public class User_RoleService extends AbstractService<User_Role> {

	@PersistenceContext
	private EntityManager em;

	@Resource
	private SessionContext ct;

	@Override
	protected Class<User_Role> getEntityClass() {
		return User_Role.class;
	}

	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	@Override
	protected SessionContext getUt() {
		return ct;
	}

	public List<User_Role> findByUserId(long userId) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<User_Role> cq = cb.createQuery(User_Role.class);
		Root<User_Role> root = cq.from(User_Role.class);
		cq.select(root).where(cb.equal(root.get("user").get("id"), userId));
		TypedQuery<User_Role> query = em.createQuery(cq);
		List<User_Role> rolePermissions = query.getResultList();
		return rolePermissions;
	}

	// Tim tat ca
	public List<User_Role> find(Long userId,Long roleId) {

		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<User_Role> cq = cb.createQuery(User_Role.class);
		Root<User_Role> root = cq.from(User_Role.class);
		List<Predicate> queries = new ArrayList<>();


		if (userId != 0 && roleId == 0) {
			Predicate userQuery = cb.equal(root.get("user").get("id"), userId);
			queries.add(userQuery);
		}

		if (userId == 0 && roleId != 0) {
			Predicate roleQuery = cb.equal(root.get("role").get("id"), roleId);
			queries.add(roleQuery);
		}
		if (userId != 0 && roleId != 0) {
			Predicate roleQuery = cb.equal(root.get("role").get("id"), roleId);
			Predicate userQuery = cb.equal(root.get("user").get("id"), userId);
			queries.add(roleQuery);
			queries.add(userQuery);
		}

		Predicate data[] = new Predicate[queries.size()];
		for (int i = 0; i < queries.size(); i++) {
			data[i] = queries.get(i);
		}
		Predicate finalPredicate = cb.and(data);
		cq.where(finalPredicate);
		TypedQuery<User_Role> query = em.createQuery(cq);
		return query.getResultList();
	}

	public User_Role create(User user, Role role) {
		User_Role temp = new User_Role();
		temp.setUser(user);
		temp.setRole(role);
		return create(temp);
	}

	public void update(User user, Role role) {
		User_Role temp = new User_Role();
		temp.setRole(role);
		temp.setUser(user);
		this.update(temp);
		System.out.println("thanh cong");
	}
}
