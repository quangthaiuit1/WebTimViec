package lixco.com.services;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import lixco.com.entities.Post;

@Stateless
@TransactionManagement(value = TransactionManagementType.CONTAINER)
public class PostService extends AbstractService<Post>{
	
	@PersistenceContext
	private EntityManager em;
	 
	@Resource
	private SessionContext ct;
	@Override
	protected Class<Post> getEntityClass() {
		return Post.class;
	}

	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	@Override
	protected SessionContext getUt() {
		return ct;
	}
	
	public List<Post> find(String namePost, long userId){
		
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Post> cq = cb.createQuery(Post.class);
		Root<Post> root = cq.from(Post.class);
		List<Predicate> queries = new ArrayList<>();
		Predicate deleteQuery = cb.equal(root.get("isDeleted"), false);
		queries.add(deleteQuery);
		if(namePost != null && userId == 0) {
			Predicate namePostQuery = cb.like(root.get("name"), (namePost + "%"));
			queries.add(namePostQuery);
		}
		if(namePost == null && userId != 0) {
			Predicate userIdQuery = cb.equal(root.get("user").get("id"), userId);
			queries.add(userIdQuery);
		}	
		Predicate data[] = new Predicate[queries.size()];
		for(int i = 0; i< queries.size(); i++) {
			data[i] = queries.get(i);
		}
		Predicate finalPredicate
		  = cb.and(data);
		cq.where(finalPredicate);
		TypedQuery<Post> query = em.createQuery(cq);
		return query.getResultList();
	}



}
