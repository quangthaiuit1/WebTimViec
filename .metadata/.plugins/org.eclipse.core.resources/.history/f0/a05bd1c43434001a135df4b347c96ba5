package lixco.com.services;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionManagement;
import javax.ejb.TransactionManagementType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.From;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import lixco.com.entities.Role;
import lixco.com.entities.Role_Permission;
import lixco.com.entities.User_Role;

@Stateless
@TransactionManagement(value = TransactionManagementType.CONTAINER)
public class Role_PermissionService extends AbstractService<Role_Permission>{
	
	@PersistenceContext
	private EntityManager em;
	 
	@Resource
	private SessionContext ct;
	@Override
	protected Class<Role_Permission> getEntityClass() {
		return Role_Permission.class;
	}

	@Override
	protected EntityManager getEntityManager() {
		return em;
	}

	@Override
	protected SessionContext getUt() {
		return ct;
	}

	
	public List<Role_Permission> findByRoleId(long role){
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
		Root<Role_Permission> root = cq.from(Role_Permission.class);
		cq.select(root).where(cb.equal(root.get("role").get("id"), role));
		TypedQuery<Role_Permission> query = em.createQuery(cq);
		List<Role_Permission> rolePermissions = query.getResultList();
		return rolePermissions;
	}
	
	public List<Role_Permission> findPermissionByListRole(List<Long> roleIds){
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
			Root<Role_Permission> root = cq.from(Role_Permission.class);
			
			cq.select(root).where(cb.in(root.get("role").get("id")).value(roleIds));
			TypedQuery<Role_Permission> query = em.createQuery(cq);
			List<Role_Permission> rolePermissions = query.getResultList();
			return rolePermissions;
		} catch (Exception e) {
			
			return null;
		}
	}
	
	public List<Role_Permission> findPermissionByListEntityRole(Role_Permission roleIds){
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Role_Permission> cq = cb.createQuery(Role_Permission.class);
			Root<Role_Permission> root = cq.from(Role_Permission.class);
			
			cq.select(root).where(cb.in(root.get("role")));
			TypedQuery<Role_Permission> query = em.createQuery(cq);
			List<Role_Permission> rolePermissions = query.getResultList();
			return rolePermissions;
		} catch (Exception e) {
			
			return null;
		}
	}
}